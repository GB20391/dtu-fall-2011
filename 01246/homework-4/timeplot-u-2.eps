%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 225 575 566
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Monday, November 14, 2011 11:49:51 AM CET
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
478 293 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
478.000 0 l
478.000 293.000 l
0 293.000 l
0 0 l
h
f
0 0 0 RG
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 468 283 rc
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
q
q
67.0000 2.00816 385.973 244.991 rc
1.00000 0 0 RG
newpath
68.0000 246.000 m
195.072 165.459 l
273.896 115.593 l
337.442 75.4699 l
389.445 42.6977 l
437.448 12.5042 l
450.973 4.00816 l
S
cliprestore
newpath
0 0 m
0 283.000 l
468.000 283.000 l
468.000 0 l
h
W
Q
Q
q
q
newpath
65.0000 249.000 m
450.973 249.000 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
253 267 13 15 rc
newpath
261.125 279.921 m
260.770 280.078 260.437 280.156 260.125 280.156  c
259.656 280.156 259.276 280.015 258.984 279.734  c
258.692 279.453 258.546 279.088 258.546 278.640  c
258.546 278.463 258.572 278.244 258.625 277.984  c
259.484 273.625 l
258.421 273.625 l
258.531 273.109 l
259.578 273.109 l
259.843 271.859 l
261.156 271.500 l
260.843 273.109 l
262.593 273.109 l
262.484 273.625 l
260.734 273.625 l
259.828 278.156 l
259.786 278.395 259.765 278.614 259.765 278.812  c
259.765 279.322 260.005 279.578 260.484 279.578  c
260.692 279.578 260.942 279.515 261.234 279.390  c
261.125 279.921 l
h
f
Q
cliprestore
newpath
0 0 m
0 283.000 l
468.000 283.000 l
468.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
68.0000 249.000 m
68.0000 254.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
58.4843 274.015 m
58.4843 272.437 l
59.1093 272.437 l
59.1250 272.578 l
59.1406 273.062 l
59.1614 273.583 59.5677 273.843 60.3593 273.843  c
60.9427 273.843 61.4062 273.614 61.7500 273.156  c
62.0937 272.697 62.2656 272.078 62.2656 271.296  c
62.2656 270.401 62.0000 269.760 61.4687 269.375  c
60.9375 268.989 60.0677 268.796 58.8593 268.796  c
58.6406 268.796 l
58.6406 264.609 l
63.3750 264.609 l
63.3750 265.703 l
59.0312 265.703 l
59.0312 268.328 l
59.6093 268.328 l
62.2552 268.328 63.5781 269.333 63.5781 271.343  c
63.5781 272.250 63.2734 272.958 62.6640 273.468  c
62.0546 273.979 61.2135 274.234 60.1406 274.234  c
59.6093 274.234 59.0572 274.161 58.4843 274.015  c
h
69.7031 271.343 m
65.3906 271.343 l
65.3906 270.718 l
70.0937 264.453 l
70.7968 264.453 l
70.7968 270.390 l
72.0468 270.390 l
72.0468 271.343 l
70.7968 271.343 l
70.7968 272.359 l
70.7968 272.859 70.8359 273.182 70.9140 273.328  c
70.9921 273.474 71.1614 273.552 71.4218 273.562  c
71.8593 273.593 l
71.9687 273.609 l
71.9687 274.000 l
68.3750 274.000 l
68.3750 273.609 l
68.4843 273.593 l
69.1406 273.562 l
69.3697 273.552 69.5208 273.468 69.5937 273.312  c
69.6666 273.156 69.7031 272.838 69.7031 272.359  c
69.7031 271.343 l
h
66.0937 270.390 m
69.7031 270.390 l
69.7031 265.609 l
66.0937 270.390 l
h
76.9062 274.234 m
75.9375 274.234 75.1562 273.783 74.5625 272.882  c
73.9687 271.981 73.6718 270.796 73.6718 269.328  c
73.6718 267.817 73.9687 266.614 74.5625 265.718  c
75.1562 264.822 75.9531 264.375 76.9531 264.375  c
77.9531 264.375 78.7526 264.822 79.3515 265.718  c
79.9505 266.614 80.2500 267.812 80.2500 269.312  c
80.2500 270.822 79.9505 272.020 79.3515 272.906  c
78.7526 273.791 77.9375 274.234 76.9062 274.234  c
h
76.9218 273.843 m
78.2552 273.906 78.9218 272.369 78.9218 269.234  c
78.9218 266.244 78.2656 264.750 76.9531 264.750  c
75.6510 264.750 75.0000 266.265 75.0000 269.296  c
75.0000 272.265 75.6406 273.781 76.9218 273.843  c
h
84.9062 274.234 m
83.9375 274.234 83.1562 273.783 82.5625 272.882  c
81.9687 271.981 81.6718 270.796 81.6718 269.328  c
81.6718 267.817 81.9687 266.614 82.5625 265.718  c
83.1562 264.822 83.9531 264.375 84.9531 264.375  c
85.9531 264.375 86.7526 264.822 87.3515 265.718  c
87.9505 266.614 88.2500 267.812 88.2500 269.312  c
88.2500 270.822 87.9505 272.020 87.3515 272.906  c
86.7526 273.791 85.9375 274.234 84.9062 274.234  c
h
84.9218 273.843 m
86.2552 273.906 86.9218 272.369 86.9218 269.234  c
86.9218 266.244 86.2656 264.750 84.9531 264.750  c
83.6510 264.750 83.0000 266.265 83.0000 269.296  c
83.0000 272.265 83.6406 273.781 84.9218 273.843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
163.743 249.000 m
163.743 254.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
153.484 274.015 m
153.484 272.437 l
154.109 272.437 l
154.125 272.578 l
154.140 273.062 l
154.161 273.583 154.567 273.843 155.359 273.843  c
155.942 273.843 156.406 273.614 156.750 273.156  c
157.093 272.697 157.265 272.078 157.265 271.296  c
157.265 270.401 157.000 269.760 156.468 269.375  c
155.937 268.989 155.067 268.796 153.859 268.796  c
153.640 268.796 l
153.640 264.609 l
158.375 264.609 l
158.375 265.703 l
154.031 265.703 l
154.031 268.328 l
154.609 268.328 l
157.255 268.328 158.578 269.333 158.578 271.343  c
158.578 272.250 158.273 272.958 157.664 273.468  c
157.054 273.979 156.213 274.234 155.140 274.234  c
154.609 274.234 154.057 274.161 153.484 274.015  c
h
161.484 274.015 m
161.484 272.437 l
162.109 272.437 l
162.125 272.578 l
162.140 273.062 l
162.161 273.583 162.567 273.843 163.359 273.843  c
163.942 273.843 164.406 273.614 164.750 273.156  c
165.093 272.697 165.265 272.078 165.265 271.296  c
165.265 270.401 165.000 269.760 164.468 269.375  c
163.937 268.989 163.067 268.796 161.859 268.796  c
161.640 268.796 l
161.640 264.609 l
166.375 264.609 l
166.375 265.703 l
162.031 265.703 l
162.031 268.328 l
162.609 268.328 l
165.255 268.328 166.578 269.333 166.578 271.343  c
166.578 272.250 166.273 272.958 165.664 273.468  c
165.054 273.979 164.213 274.234 163.140 274.234  c
162.609 274.234 162.057 274.161 161.484 274.015  c
h
171.906 274.234 m
170.937 274.234 170.156 273.783 169.562 272.882  c
168.968 271.981 168.671 270.796 168.671 269.328  c
168.671 267.817 168.968 266.614 169.562 265.718  c
170.156 264.822 170.953 264.375 171.953 264.375  c
172.953 264.375 173.752 264.822 174.351 265.718  c
174.950 266.614 175.250 267.812 175.250 269.312  c
175.250 270.822 174.950 272.020 174.351 272.906  c
173.752 273.791 172.937 274.234 171.906 274.234  c
h
171.921 273.843 m
173.255 273.906 173.921 272.369 173.921 269.234  c
173.921 266.244 173.265 264.750 171.953 264.750  c
170.651 264.750 170.000 266.265 170.000 269.296  c
170.000 272.265 170.640 273.781 171.921 273.843  c
h
179.906 274.234 m
178.937 274.234 178.156 273.783 177.562 272.882  c
176.968 271.981 176.671 270.796 176.671 269.328  c
176.671 267.817 176.968 266.614 177.562 265.718  c
178.156 264.822 178.953 264.375 179.953 264.375  c
180.953 264.375 181.752 264.822 182.351 265.718  c
182.950 266.614 183.250 267.812 183.250 269.312  c
183.250 270.822 182.950 272.020 182.351 272.906  c
181.752 273.791 180.937 274.234 179.906 274.234  c
h
179.921 273.843 m
181.255 273.906 181.921 272.369 181.921 269.234  c
181.921 266.244 181.265 264.750 179.953 264.750  c
178.651 264.750 178.000 266.265 178.000 269.296  c
178.000 272.265 178.640 273.781 179.921 273.843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
259.486 249.000 m
259.486 254.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
249.484 274.015 m
249.484 272.437 l
250.109 272.437 l
250.125 272.578 l
250.140 273.062 l
250.161 273.583 250.567 273.843 251.359 273.843  c
251.942 273.843 252.406 273.614 252.750 273.156  c
253.093 272.697 253.265 272.078 253.265 271.296  c
253.265 270.401 253.000 269.760 252.468 269.375  c
251.937 268.989 251.067 268.796 249.859 268.796  c
249.640 268.796 l
249.640 264.609 l
254.375 264.609 l
254.375 265.703 l
250.031 265.703 l
250.031 268.328 l
250.609 268.328 l
253.255 268.328 254.578 269.333 254.578 271.343  c
254.578 272.250 254.273 272.958 253.664 273.468  c
253.054 273.979 252.213 274.234 251.140 274.234  c
250.609 274.234 250.057 274.161 249.484 274.015  c
h
258.109 269.187 m
258.703 268.375 259.458 267.968 260.375 267.968  c
261.197 267.968 261.869 268.242 262.390 268.789  c
262.911 269.335 263.171 270.046 263.171 270.921  c
263.171 271.859 262.875 272.645 262.281 273.281  c
261.687 273.916 260.958 274.234 260.093 274.234  c
259.031 274.234 258.213 273.820 257.640 272.992  c
257.067 272.164 256.781 270.984 256.781 269.453  c
256.781 267.838 257.112 266.585 257.773 265.695  c
258.434 264.804 259.369 264.359 260.578 264.359  c
261.359 264.359 262.046 264.500 262.640 264.781  c
262.640 266.281 l
262.015 266.281 l
262.000 266.156 l
261.968 265.703 l
261.947 265.421 261.796 265.192 261.515 265.015  c
261.234 264.838 260.880 264.750 260.453 264.750  c
259.713 264.750 259.138 265.138 258.726 265.914  c
258.315 266.690 258.109 267.781 258.109 269.187  c
h
258.156 270.531 m
258.156 271.500 258.351 272.291 258.742 272.906  c
259.132 273.520 259.635 273.828 260.250 273.828  c
261.354 273.828 261.906 272.916 261.906 271.093  c
261.906 269.302 261.333 268.406 260.187 268.406  c
259.562 268.406 259.067 268.599 258.703 268.984  c
258.338 269.369 258.156 269.885 258.156 270.531  c
h
267.906 274.234 m
266.937 274.234 266.156 273.783 265.562 272.882  c
264.968 271.981 264.671 270.796 264.671 269.328  c
264.671 267.817 264.968 266.614 265.562 265.718  c
266.156 264.822 266.953 264.375 267.953 264.375  c
268.953 264.375 269.752 264.822 270.351 265.718  c
270.950 266.614 271.250 267.812 271.250 269.312  c
271.250 270.822 270.950 272.020 270.351 272.906  c
269.752 273.791 268.937 274.234 267.906 274.234  c
h
267.921 273.843 m
269.255 273.906 269.921 272.369 269.921 269.234  c
269.921 266.244 269.265 264.750 267.953 264.750  c
266.651 264.750 266.000 266.265 266.000 269.296  c
266.000 272.265 266.640 273.781 267.921 273.843  c
h
275.906 274.234 m
274.937 274.234 274.156 273.783 273.562 272.882  c
272.968 271.981 272.671 270.796 272.671 269.328  c
272.671 267.817 272.968 266.614 273.562 265.718  c
274.156 264.822 274.953 264.375 275.953 264.375  c
276.953 264.375 277.752 264.822 278.351 265.718  c
278.950 266.614 279.250 267.812 279.250 269.312  c
279.250 270.822 278.950 272.020 278.351 272.906  c
277.752 273.791 276.937 274.234 275.906 274.234  c
h
275.921 273.843 m
277.255 273.906 277.921 272.369 277.921 269.234  c
277.921 266.244 277.265 264.750 275.953 264.750  c
274.651 264.750 274.000 266.265 274.000 269.296  c
274.000 272.265 274.640 273.781 275.921 273.843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
355.229 249.000 m
355.229 254.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
345.484 274.015 m
345.484 272.437 l
346.109 272.437 l
346.125 272.578 l
346.140 273.062 l
346.161 273.583 346.567 273.843 347.359 273.843  c
347.942 273.843 348.406 273.614 348.750 273.156  c
349.093 272.697 349.265 272.078 349.265 271.296  c
349.265 270.401 349.000 269.760 348.468 269.375  c
347.937 268.989 347.067 268.796 345.859 268.796  c
345.640 268.796 l
345.640 264.609 l
350.375 264.609 l
350.375 265.703 l
346.031 265.703 l
346.031 268.328 l
346.609 268.328 l
349.255 268.328 350.578 269.333 350.578 271.343  c
350.578 272.250 350.273 272.958 349.664 273.468  c
349.054 273.979 348.213 274.234 347.140 274.234  c
346.609 274.234 346.057 274.161 345.484 274.015  c
h
353.781 274.000 m
353.968 272.979 354.270 272.091 354.687 271.335  c
355.104 270.580 356.093 269.151 357.656 267.046  c
358.609 265.781 l
353.312 265.781 l
353.312 264.609 l
359.343 264.609 l
359.343 265.421 l
356.770 268.880 355.411 271.739 355.265 274.000  c
353.781 274.000 l
h
363.906 274.234 m
362.937 274.234 362.156 273.783 361.562 272.882  c
360.968 271.981 360.671 270.796 360.671 269.328  c
360.671 267.817 360.968 266.614 361.562 265.718  c
362.156 264.822 362.953 264.375 363.953 264.375  c
364.953 264.375 365.752 264.822 366.351 265.718  c
366.950 266.614 367.250 267.812 367.250 269.312  c
367.250 270.822 366.950 272.020 366.351 272.906  c
365.752 273.791 364.937 274.234 363.906 274.234  c
h
363.921 273.843 m
365.255 273.906 365.921 272.369 365.921 269.234  c
365.921 266.244 365.265 264.750 363.953 264.750  c
362.651 264.750 362.000 266.265 362.000 269.296  c
362.000 272.265 362.640 273.781 363.921 273.843  c
h
371.906 274.234 m
370.937 274.234 370.156 273.783 369.562 272.882  c
368.968 271.981 368.671 270.796 368.671 269.328  c
368.671 267.817 368.968 266.614 369.562 265.718  c
370.156 264.822 370.953 264.375 371.953 264.375  c
372.953 264.375 373.752 264.822 374.351 265.718  c
374.950 266.614 375.250 267.812 375.250 269.312  c
375.250 270.822 374.950 272.020 374.351 272.906  c
373.752 273.791 372.937 274.234 371.906 274.234  c
h
371.921 273.843 m
373.255 273.906 373.921 272.369 373.921 269.234  c
373.921 266.244 373.265 264.750 371.953 264.750  c
370.651 264.750 370.000 266.265 370.000 269.296  c
370.000 272.265 370.640 273.781 371.921 273.843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
450.973 249.000 m
450.973 254.055 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
440.484 274.015 m
440.484 272.437 l
441.109 272.437 l
441.125 272.578 l
441.140 273.062 l
441.161 273.583 441.567 273.843 442.359 273.843  c
442.942 273.843 443.406 273.614 443.750 273.156  c
444.093 272.697 444.265 272.078 444.265 271.296  c
444.265 270.401 444.000 269.760 443.468 269.375  c
442.937 268.989 442.067 268.796 440.859 268.796  c
440.640 268.796 l
440.640 264.609 l
445.375 264.609 l
445.375 265.703 l
441.031 265.703 l
441.031 268.328 l
441.609 268.328 l
444.255 268.328 445.578 269.333 445.578 271.343  c
445.578 272.250 445.273 272.958 444.664 273.468  c
444.054 273.979 443.213 274.234 442.140 274.234  c
441.609 274.234 441.057 274.161 440.484 274.015  c
h
449.718 268.937 m
448.750 268.270 448.265 267.541 448.265 266.750  c
448.265 266.041 448.523 265.466 449.039 265.023  c
449.554 264.580 450.229 264.359 451.062 264.359  c
451.854 264.359 452.487 264.546 452.960 264.921  c
453.434 265.296 453.671 265.796 453.671 266.421  c
453.671 267.390 453.052 268.187 451.812 268.812  c
453.312 269.447 454.062 270.364 454.062 271.562  c
454.062 272.354 453.765 272.997 453.171 273.492  c
452.578 273.987 451.812 274.234 450.875 274.234  c
449.958 274.234 449.216 274.002 448.648 273.539  c
448.080 273.075 447.796 272.468 447.796 271.718  c
447.796 270.458 448.437 269.531 449.718 268.937  c
h
451.468 268.609 m
452.208 268.067 452.578 267.349 452.578 266.453  c
452.578 265.942 452.427 265.531 452.125 265.218  c
451.822 264.906 451.427 264.750 450.937 264.750  c
450.500 264.750 450.127 264.903 449.820 265.210  c
449.513 265.518 449.359 265.895 449.359 266.343  c
449.359 266.781 449.500 267.148 449.781 267.445  c
450.062 267.742 450.625 268.130 451.468 268.609  c
h
450.000 269.218 m
449.364 269.802 449.046 270.583 449.046 271.562  c
449.046 272.260 449.218 272.815 449.562 273.226  c
449.906 273.638 450.364 273.843 450.937 273.843  c
451.479 273.843 451.927 273.661 452.281 273.296  c
452.635 272.932 452.812 272.474 452.812 271.921  c
452.812 271.463 452.677 271.080 452.406 270.773  c
452.135 270.466 451.630 270.109 450.890 269.703  c
450.000 269.218 l
h
458.906 274.234 m
457.937 274.234 457.156 273.783 456.562 272.882  c
455.968 271.981 455.671 270.796 455.671 269.328  c
455.671 267.817 455.968 266.614 456.562 265.718  c
457.156 264.822 457.953 264.375 458.953 264.375  c
459.953 264.375 460.752 264.822 461.351 265.718  c
461.950 266.614 462.250 267.812 462.250 269.312  c
462.250 270.822 461.950 272.020 461.351 272.906  c
460.752 273.791 459.937 274.234 458.906 274.234  c
h
458.921 273.843 m
460.255 273.906 460.921 272.369 460.921 269.234  c
460.921 266.244 460.265 264.750 458.953 264.750  c
457.651 264.750 457.000 266.265 457.000 269.296  c
457.000 272.265 457.640 273.781 458.921 273.843  c
h
466.906 274.234 m
465.937 274.234 465.156 273.783 464.562 272.882  c
463.968 271.981 463.671 270.796 463.671 269.328  c
463.671 267.817 463.968 266.614 464.562 265.718  c
465.156 264.822 465.953 264.375 466.953 264.375  c
467.953 264.375 468.752 264.822 469.351 265.718  c
469.950 266.614 470.250 267.812 470.250 269.312  c
470.250 270.822 469.950 272.020 469.351 272.906  c
468.752 273.791 467.937 274.234 466.906 274.234  c
h
466.921 273.843 m
468.255 273.906 468.921 272.369 468.921 269.234  c
468.921 266.244 468.265 264.750 466.953 264.750  c
465.651 264.750 465.000 266.265 465.000 269.296  c
465.000 272.265 465.640 273.781 466.921 273.843  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
115.871 249.000 m
115.871 251.527 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
211.614 249.000 m
211.614 251.527 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
307.358 249.000 m
307.358 251.527 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
403.101 249.000 m
403.101 251.527 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
q
newpath
65.0000 249.000 m
65.0000 4.00816 l
S
Q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 118 40 15 rc
newpath
9.56250 131.000 m
9.56250 129.703 l
8.92708 130.671 8.09895 131.156 7.07812 131.156  c
6.48437 131.156 6.01822 130.960 5.67968 130.570  c
5.34114 130.179 5.17187 129.645 5.17187 128.968  c
5.17187 125.750 l
5.14062 125.125 l
5.11979 124.885 5.07812 124.731 5.01562 124.664  c
4.95312 124.596 4.79687 124.552 4.54687 124.531  c
4.12500 124.500 l
4.00000 124.500 l
4.00000 124.109 l
6.42187 124.109 l
6.42187 128.765 l
6.42187 129.828 6.80208 130.359 7.56250 130.359  c
8.25000 130.359 8.91666 130.000 9.56250 129.281  c
9.56250 125.750 l
9.51562 125.125 l
9.50520 124.885 9.46614 124.731 9.39843 124.664  c
9.33072 124.596 9.17708 124.552 8.93750 124.531  c
8.50000 124.500 l
8.39062 124.500 l
8.39062 124.109 l
10.8125 124.109 l
10.8125 129.359 l
10.8593 129.984 l
10.8697 130.224 10.9088 130.377 10.9765 130.445  c
11.0442 130.513 11.1979 130.552 11.4375 130.562  c
11.8750 130.593 l
11.9843 130.609 l
11.9843 131.000 l
9.56250 131.000 l
h
15.5625 132.484 m
15.5625 132.875 l
14.6562 132.322 13.9401 131.507 13.4140 130.429  c
12.8880 129.351 12.6250 128.177 12.6250 126.906  c
12.6250 125.677 12.8958 124.518 13.4375 123.429  c
13.9791 122.341 14.6875 121.526 15.5625 120.984  c
15.5625 121.375 l
14.9166 122.104 14.4739 122.862 14.2343 123.648  c
13.9947 124.434 13.8750 125.531 13.8750 126.937  c
13.8750 128.322 13.9947 129.411 14.2343 130.203  c
14.4739 130.994 14.9166 131.755 15.5625 132.484  c
h
19.9062 131.234 m
18.9375 131.234 18.1562 130.783 17.5625 129.882  c
16.9687 128.981 16.6718 127.796 16.6718 126.328  c
16.6718 124.817 16.9687 123.614 17.5625 122.718  c
18.1562 121.822 18.9531 121.375 19.9531 121.375  c
20.9531 121.375 21.7526 121.822 22.3515 122.718  c
22.9505 123.614 23.2500 124.812 23.2500 126.312  c
23.2500 127.822 22.9505 129.020 22.3515 129.906  c
21.7526 130.791 20.9375 131.234 19.9062 131.234  c
h
19.9218 130.843 m
21.2552 130.906 21.9218 129.369 21.9218 126.234  c
21.9218 123.244 21.2656 121.750 19.9531 121.750  c
18.6510 121.750 18.0000 123.265 18.0000 126.296  c
18.0000 129.265 18.6406 130.781 19.9218 130.843  c
h
25.5625 131.000 m
24.9375 131.000 l
24.9375 129.437 l
26.5000 129.437 l
26.5000 130.796 l
26.5000 131.338 26.4713 131.708 26.4140 131.906  c
26.3567 132.104 26.2187 132.317 26.0000 132.546  c
25.7083 132.849 25.3541 133.010 24.9375 133.031  c
24.9375 132.640 l
25.3541 132.609 25.5625 132.197 25.5625 131.406  c
25.5625 131.000 l
h
31.5781 130.968 m
31.2552 131.093 30.9531 131.156 30.6718 131.156  c
29.9427 131.156 29.4088 130.971 29.0703 130.601  c
28.7317 130.231 28.5625 129.645 28.5625 128.843  c
28.5625 124.625 l
27.5468 124.625 l
27.5468 124.109 l
28.5625 124.109 l
28.5625 122.859 l
29.8125 122.546 l
29.8125 124.109 l
31.7343 124.109 l
31.7343 124.625 l
29.8125 124.625 l
29.8125 129.015 l
29.8125 129.651 29.8854 130.083 30.0312 130.312  c
30.1770 130.541 30.4531 130.656 30.8593 130.656  c
31.0572 130.656 31.2968 130.588 31.5781 130.453  c
31.5781 130.968 l
h
32.4375 132.484 m
32.4375 132.875 l
33.3437 132.322 34.0599 131.507 34.5859 130.429  c
35.1119 129.351 35.3750 128.177 35.3750 126.906  c
35.3750 125.677 35.1041 124.518 34.5625 123.429  c
34.0208 122.341 33.3125 121.526 32.4375 120.984  c
32.4375 121.375 l
33.0833 122.104 33.5260 122.862 33.7656 123.648  c
34.0052 124.434 34.1250 125.531 34.1250 126.937  c
34.1250 128.322 34.0052 129.411 33.7656 130.203  c
33.5260 130.994 33.0833 131.755 32.4375 132.484  c
h
f
Q
cliprestore
newpath
0 0 m
0 283.000 l
468.000 283.000 l
468.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
newpath
65.0000 241.427 m
59.9450 241.427 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 252.015 m
47.4843 250.437 l
48.1093 250.437 l
48.1250 250.578 l
48.1406 251.062 l
48.1614 251.583 48.5677 251.843 49.3593 251.843  c
49.9427 251.843 50.4062 251.614 50.7500 251.156  c
51.0937 250.697 51.2656 250.078 51.2656 249.296  c
51.2656 248.401 51.0000 247.760 50.4687 247.375  c
49.9375 246.989 49.0677 246.796 47.8593 246.796  c
47.6406 246.796 l
47.6406 242.609 l
52.3750 242.609 l
52.3750 243.703 l
48.0312 243.703 l
48.0312 246.328 l
48.6093 246.328 l
51.2552 246.328 52.5781 247.333 52.5781 249.343  c
52.5781 250.250 52.2734 250.958 51.6640 251.468  c
51.0546 251.979 50.2135 252.234 49.1406 252.234  c
48.6093 252.234 48.0572 252.161 47.4843 252.015  c
h
58.7031 249.343 m
54.3906 249.343 l
54.3906 248.718 l
59.0937 242.453 l
59.7968 242.453 l
59.7968 248.390 l
61.0468 248.390 l
61.0468 249.343 l
59.7968 249.343 l
59.7968 250.359 l
59.7968 250.859 59.8359 251.182 59.9140 251.328  c
59.9921 251.474 60.1614 251.552 60.4218 251.562  c
60.8593 251.593 l
60.9687 251.609 l
60.9687 252.000 l
57.3750 252.000 l
57.3750 251.609 l
57.4843 251.593 l
58.1406 251.562 l
58.3697 251.552 58.5208 251.468 58.5937 251.312  c
58.6666 251.156 58.7031 250.838 58.7031 250.359  c
58.7031 249.343 l
h
55.0937 248.390 m
58.7031 248.390 l
58.7031 243.609 l
55.0937 248.390 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 210.825 m
59.9450 210.825 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 221.015 m
47.4843 219.437 l
48.1093 219.437 l
48.1250 219.578 l
48.1406 220.062 l
48.1614 220.583 48.5677 220.843 49.3593 220.843  c
49.9427 220.843 50.4062 220.614 50.7500 220.156  c
51.0937 219.697 51.2656 219.078 51.2656 218.296  c
51.2656 217.401 51.0000 216.760 50.4687 216.375  c
49.9375 215.989 49.0677 215.796 47.8593 215.796  c
47.6406 215.796 l
47.6406 211.609 l
52.3750 211.609 l
52.3750 212.703 l
48.0312 212.703 l
48.0312 215.328 l
48.6093 215.328 l
51.2552 215.328 52.5781 216.333 52.5781 218.343  c
52.5781 219.250 52.2734 219.958 51.6640 220.468  c
51.0546 220.979 50.2135 221.234 49.1406 221.234  c
48.6093 221.234 48.0572 221.161 47.4843 221.015  c
h
55.4843 221.015 m
55.4843 219.437 l
56.1093 219.437 l
56.1250 219.578 l
56.1406 220.062 l
56.1614 220.583 56.5677 220.843 57.3593 220.843  c
57.9427 220.843 58.4062 220.614 58.7500 220.156  c
59.0937 219.697 59.2656 219.078 59.2656 218.296  c
59.2656 217.401 59.0000 216.760 58.4687 216.375  c
57.9375 215.989 57.0677 215.796 55.8593 215.796  c
55.6406 215.796 l
55.6406 211.609 l
60.3750 211.609 l
60.3750 212.703 l
56.0312 212.703 l
56.0312 215.328 l
56.6093 215.328 l
59.2552 215.328 60.5781 216.333 60.5781 218.343  c
60.5781 219.250 60.2734 219.958 59.6640 220.468  c
59.0546 220.979 58.2135 221.234 57.1406 221.234  c
56.6093 221.234 56.0572 221.161 55.4843 221.015  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 180.223 m
59.9450 180.223 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 191.015 m
47.4843 189.437 l
48.1093 189.437 l
48.1250 189.578 l
48.1406 190.062 l
48.1614 190.583 48.5677 190.843 49.3593 190.843  c
49.9427 190.843 50.4062 190.614 50.7500 190.156  c
51.0937 189.697 51.2656 189.078 51.2656 188.296  c
51.2656 187.401 51.0000 186.760 50.4687 186.375  c
49.9375 185.989 49.0677 185.796 47.8593 185.796  c
47.6406 185.796 l
47.6406 181.609 l
52.3750 181.609 l
52.3750 182.703 l
48.0312 182.703 l
48.0312 185.328 l
48.6093 185.328 l
51.2552 185.328 52.5781 186.333 52.5781 188.343  c
52.5781 189.250 52.2734 189.958 51.6640 190.468  c
51.0546 190.979 50.2135 191.234 49.1406 191.234  c
48.6093 191.234 48.0572 191.161 47.4843 191.015  c
h
56.1093 186.187 m
56.7031 185.375 57.4583 184.968 58.3750 184.968  c
59.1979 184.968 59.8697 185.242 60.3906 185.789  c
60.9114 186.335 61.1718 187.046 61.1718 187.921  c
61.1718 188.859 60.8750 189.645 60.2812 190.281  c
59.6875 190.916 58.9583 191.234 58.0937 191.234  c
57.0312 191.234 56.2135 190.820 55.6406 189.992  c
55.0677 189.164 54.7812 187.984 54.7812 186.453  c
54.7812 184.838 55.1119 183.585 55.7734 182.695  c
56.4349 181.804 57.3697 181.359 58.5781 181.359  c
59.3593 181.359 60.0468 181.500 60.6406 181.781  c
60.6406 183.281 l
60.0156 183.281 l
60.0000 183.156 l
59.9687 182.703 l
59.9479 182.421 59.7968 182.192 59.5156 182.015  c
59.2343 181.838 58.8802 181.750 58.4531 181.750  c
57.7135 181.750 57.1380 182.138 56.7265 182.914  c
56.3151 183.690 56.1093 184.781 56.1093 186.187  c
h
56.1562 187.531 m
56.1562 188.500 56.3515 189.291 56.7421 189.906  c
57.1328 190.520 57.6354 190.828 58.2500 190.828  c
59.3541 190.828 59.9062 189.916 59.9062 188.093  c
59.9062 186.302 59.3333 185.406 58.1875 185.406  c
57.5625 185.406 57.0677 185.599 56.7031 185.984  c
56.3385 186.369 56.1562 186.885 56.1562 187.531  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 149.621 m
59.9450 149.621 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 160.015 m
47.4843 158.437 l
48.1093 158.437 l
48.1250 158.578 l
48.1406 159.062 l
48.1614 159.583 48.5677 159.843 49.3593 159.843  c
49.9427 159.843 50.4062 159.614 50.7500 159.156  c
51.0937 158.697 51.2656 158.078 51.2656 157.296  c
51.2656 156.401 51.0000 155.760 50.4687 155.375  c
49.9375 154.989 49.0677 154.796 47.8593 154.796  c
47.6406 154.796 l
47.6406 150.609 l
52.3750 150.609 l
52.3750 151.703 l
48.0312 151.703 l
48.0312 154.328 l
48.6093 154.328 l
51.2552 154.328 52.5781 155.333 52.5781 157.343  c
52.5781 158.250 52.2734 158.958 51.6640 159.468  c
51.0546 159.979 50.2135 160.234 49.1406 160.234  c
48.6093 160.234 48.0572 160.161 47.4843 160.015  c
h
55.7812 160.000 m
55.9687 158.979 56.2708 158.091 56.6875 157.335  c
57.1041 156.580 58.0937 155.151 59.6562 153.046  c
60.6093 151.781 l
55.3125 151.781 l
55.3125 150.609 l
61.3437 150.609 l
61.3437 151.421 l
58.7708 154.880 57.4114 157.739 57.2656 160.000  c
55.7812 160.000 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 119.019 m
59.9450 119.019 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 130.015 m
47.4843 128.437 l
48.1093 128.437 l
48.1250 128.578 l
48.1406 129.062 l
48.1614 129.583 48.5677 129.843 49.3593 129.843  c
49.9427 129.843 50.4062 129.614 50.7500 129.156  c
51.0937 128.697 51.2656 128.078 51.2656 127.296  c
51.2656 126.401 51.0000 125.760 50.4687 125.375  c
49.9375 124.989 49.0677 124.796 47.8593 124.796  c
47.6406 124.796 l
47.6406 120.609 l
52.3750 120.609 l
52.3750 121.703 l
48.0312 121.703 l
48.0312 124.328 l
48.6093 124.328 l
51.2552 124.328 52.5781 125.333 52.5781 127.343  c
52.5781 128.250 52.2734 128.958 51.6640 129.468  c
51.0546 129.979 50.2135 130.234 49.1406 130.234  c
48.6093 130.234 48.0572 130.161 47.4843 130.015  c
h
56.7187 124.937 m
55.7500 124.270 55.2656 123.541 55.2656 122.750  c
55.2656 122.041 55.5234 121.466 56.0390 121.023  c
56.5546 120.580 57.2291 120.359 58.0625 120.359  c
58.8541 120.359 59.4869 120.546 59.9609 120.921  c
60.4349 121.296 60.6718 121.796 60.6718 122.421  c
60.6718 123.390 60.0520 124.187 58.8125 124.812  c
60.3125 125.447 61.0625 126.364 61.0625 127.562  c
61.0625 128.354 60.7656 128.997 60.1718 129.492  c
59.5781 129.987 58.8125 130.234 57.8750 130.234  c
56.9583 130.234 56.2161 130.002 55.6484 129.539  c
55.0807 129.075 54.7968 128.468 54.7968 127.718  c
54.7968 126.458 55.4375 125.531 56.7187 124.937  c
h
58.4687 124.609 m
59.2083 124.067 59.5781 123.349 59.5781 122.453  c
59.5781 121.942 59.4270 121.531 59.1250 121.218  c
58.8229 120.906 58.4270 120.750 57.9375 120.750  c
57.5000 120.750 57.1276 120.903 56.8203 121.210  c
56.5130 121.518 56.3593 121.895 56.3593 122.343  c
56.3593 122.781 56.5000 123.148 56.7812 123.445  c
57.0625 123.742 57.6250 124.130 58.4687 124.609  c
h
57.0000 125.218 m
56.3645 125.802 56.0468 126.583 56.0468 127.562  c
56.0468 128.260 56.2187 128.815 56.5625 129.226  c
56.9062 129.638 57.3645 129.843 57.9375 129.843  c
58.4791 129.843 58.9270 129.661 59.2812 129.296  c
59.6354 128.932 59.8125 128.474 59.8125 127.921  c
59.8125 127.463 59.6770 127.080 59.4062 126.773  c
59.1354 126.466 58.6302 126.109 57.8906 125.703  c
57.0000 125.218 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 88.4179 m
59.9450 88.4179 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
47.4843 99.0156 m
47.4843 97.4375 l
48.1093 97.4375 l
48.1250 97.5781 l
48.1406 98.0625 l
48.1614 98.5833 48.5677 98.8437 49.3593 98.8437  c
49.9427 98.8437 50.4062 98.6145 50.7500 98.1562  c
51.0937 97.6979 51.2656 97.0781 51.2656 96.2968  c
51.2656 95.4010 51.0000 94.7604 50.4687 94.3750  c
49.9375 93.9895 49.0677 93.7968 47.8593 93.7968  c
47.6406 93.7968 l
47.6406 89.6093 l
52.3750 89.6093 l
52.3750 90.7031 l
48.0312 90.7031 l
48.0312 93.3281 l
48.6093 93.3281 l
51.2552 93.3281 52.5781 94.3333 52.5781 96.3437  c
52.5781 97.2500 52.2734 97.9583 51.6640 98.4687  c
51.0546 98.9791 50.2135 99.2343 49.1406 99.2343  c
48.6093 99.2343 48.0572 99.1614 47.4843 99.0156  c
h
59.7968 94.4062 m
59.2031 95.2291 58.4479 95.6406 57.5312 95.6406  c
56.7083 95.6406 56.0390 95.3645 55.5234 94.8125  c
55.0078 94.2604 54.7500 93.5520 54.7500 92.6875  c
54.7500 91.7500 55.0416 90.9609 55.6250 90.3203  c
56.2083 89.6796 56.9375 89.3593 57.8125 89.3593  c
58.8750 89.3593 59.6927 89.7760 60.2656 90.6093  c
60.8385 91.4427 61.1250 92.6250 61.1250 94.1562  c
61.1250 95.7708 60.7942 97.0208 60.1328 97.9062  c
59.4713 98.7916 58.5416 99.2343 57.3437 99.2343  c
56.5625 99.2343 55.8697 99.0937 55.2656 98.8125  c
55.2656 97.3125 l
55.8906 97.3125 l
55.9062 97.4531 l
55.9375 97.9062 l
55.9583 98.1875 56.1093 98.4140 56.3906 98.5859  c
56.6718 98.7578 57.0260 98.8437 57.4531 98.8437  c
58.1927 98.8437 58.7682 98.4557 59.1796 97.6796  c
59.5911 96.9036 59.7968 95.8125 59.7968 94.4062  c
h
59.7500 93.0625 m
59.7500 92.0937 59.5546 91.3020 59.1640 90.6875  c
58.7734 90.0729 58.2708 89.7656 57.6562 89.7656  c
56.5520 89.7656 56.0000 90.6822 56.0000 92.5156  c
56.0000 94.2968 56.5729 95.1875 57.7187 95.1875  c
58.3437 95.1875 58.8385 94.9947 59.2031 94.6093  c
59.5677 94.2239 59.7500 93.7083 59.7500 93.0625  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 57.8161 m
59.9450 57.8161 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
48.1093 63.1875 m
48.7031 62.3750 49.4583 61.9687 50.3750 61.9687  c
51.1979 61.9687 51.8697 62.2421 52.3906 62.7890  c
52.9114 63.3359 53.1718 64.0468 53.1718 64.9218  c
53.1718 65.8593 52.8750 66.6458 52.2812 67.2812  c
51.6875 67.9166 50.9583 68.2343 50.0937 68.2343  c
49.0312 68.2343 48.2135 67.8203 47.6406 66.9921  c
47.0677 66.1640 46.7812 64.9843 46.7812 63.4531  c
46.7812 61.8385 47.1119 60.5859 47.7734 59.6953  c
48.4349 58.8046 49.3697 58.3593 50.5781 58.3593  c
51.3593 58.3593 52.0468 58.5000 52.6406 58.7812  c
52.6406 60.2812 l
52.0156 60.2812 l
52.0000 60.1562 l
51.9687 59.7031 l
51.9479 59.4218 51.7968 59.1927 51.5156 59.0156  c
51.2343 58.8385 50.8802 58.7500 50.4531 58.7500  c
49.7135 58.7500 49.1380 59.1380 48.7265 59.9140  c
48.3151 60.6901 48.1093 61.7812 48.1093 63.1875  c
h
48.1562 64.5312 m
48.1562 65.5000 48.3515 66.2916 48.7421 66.9062  c
49.1328 67.5208 49.6354 67.8281 50.2500 67.8281  c
51.3541 67.8281 51.9062 66.9166 51.9062 65.0937  c
51.9062 63.3020 51.3333 62.4062 50.1875 62.4062  c
49.5625 62.4062 49.0677 62.5989 48.7031 62.9843  c
48.3385 63.3697 48.1562 63.8854 48.1562 64.5312  c
h
57.9062 68.2343 m
56.9375 68.2343 56.1562 67.7838 55.5625 66.8828  c
54.9687 65.9817 54.6718 64.7968 54.6718 63.3281  c
54.6718 61.8177 54.9687 60.6145 55.5625 59.7187  c
56.1562 58.8229 56.9531 58.3750 57.9531 58.3750  c
58.9531 58.3750 59.7526 58.8229 60.3515 59.7187  c
60.9505 60.6145 61.2500 61.8125 61.2500 63.3125  c
61.2500 64.8229 60.9505 66.0208 60.3515 66.9062  c
59.7526 67.7916 58.9375 68.2343 57.9062 68.2343  c
h
57.9218 67.8437 m
59.2552 67.9062 59.9218 66.3697 59.9218 63.2343  c
59.9218 60.2447 59.2656 58.7500 57.9531 58.7500  c
56.6510 58.7500 56.0000 60.2656 56.0000 63.2968  c
56.0000 66.2656 56.6406 67.7812 57.9218 67.8437  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 27.2142 m
59.9450 27.2142 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
48.1093 33.1875 m
48.7031 32.3750 49.4583 31.9687 50.3750 31.9687  c
51.1979 31.9687 51.8697 32.2421 52.3906 32.7890  c
52.9114 33.3359 53.1718 34.0468 53.1718 34.9218  c
53.1718 35.8593 52.8750 36.6458 52.2812 37.2812  c
51.6875 37.9166 50.9583 38.2343 50.0937 38.2343  c
49.0312 38.2343 48.2135 37.8203 47.6406 36.9921  c
47.0677 36.1640 46.7812 34.9843 46.7812 33.4531  c
46.7812 31.8385 47.1119 30.5859 47.7734 29.6953  c
48.4349 28.8046 49.3697 28.3593 50.5781 28.3593  c
51.3593 28.3593 52.0468 28.5000 52.6406 28.7812  c
52.6406 30.2812 l
52.0156 30.2812 l
52.0000 30.1562 l
51.9687 29.7031 l
51.9479 29.4218 51.7968 29.1927 51.5156 29.0156  c
51.2343 28.8385 50.8802 28.7500 50.4531 28.7500  c
49.7135 28.7500 49.1380 29.1380 48.7265 29.9140  c
48.3151 30.6901 48.1093 31.7812 48.1093 33.1875  c
h
48.1562 34.5312 m
48.1562 35.5000 48.3515 36.2916 48.7421 36.9062  c
49.1328 37.5208 49.6354 37.8281 50.2500 37.8281  c
51.3541 37.8281 51.9062 36.9166 51.9062 35.0937  c
51.9062 33.3020 51.3333 32.4062 50.1875 32.4062  c
49.5625 32.4062 49.0677 32.5989 48.7031 32.9843  c
48.3385 33.3697 48.1562 33.8854 48.1562 34.5312  c
h
58.5781 28.5156 m
58.5781 36.3593 l
58.6250 36.9843 l
58.6354 37.2343 58.7057 37.3984 58.8359 37.4765  c
58.9661 37.5546 59.2343 37.5937 59.6406 37.5937  c
60.3906 37.6093 l
60.3906 38.0000 l
55.5312 38.0000 l
55.5312 37.6093 l
56.2656 37.5937 l
56.6718 37.5937 56.9401 37.5546 57.0703 37.4765  c
57.2005 37.3984 57.2760 37.2343 57.2968 36.9843  c
57.3281 36.3593 l
57.3281 30.5312 l
57.2968 29.8906 l
57.2968 29.5885 57.2083 29.4375 57.0312 29.4375  c
56.9062 29.4375 56.6145 29.4791 56.1562 29.5625  c
55.5312 29.6718 l
55.5312 29.2812 l
58.5781 28.5156 l
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 226.126 m
62.4725 226.126 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 195.524 m
62.4725 195.524 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 164.922 m
62.4725 164.922 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 134.320 m
62.4725 134.320 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 103.718 m
62.4725 103.718 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 73.1170 m
62.4725 73.1170 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 42.5151 m
62.4725 42.5151 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
newpath
65.0000 11.9133 m
62.4725 11.9133 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
Q
Q
cliprestore
0 0 478 293 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
